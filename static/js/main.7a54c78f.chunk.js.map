{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","isWinner","sign","forEach","el","state","squares","alert","currentScore","score","setState","setTimeout","clear","isDraw","count","clickHandler","event","data","target","getAttribute","currentSquares","signs","console","log","startSign","Array","fill","changeStartSign","e","currentSigns","value","x","0","className","onClick","this","Object","keys","map","type","name","id","onChange","for","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a54c78f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      count: 0,\n      score: {\n        x: 0,\n        0: 0,\n      },\n      signs: [\"x\", \"0\"],\n    };\n  }\n  isWinner = (sign) => {\n    const winnerLines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    winnerLines.forEach((el) => {\n      if (\n        this.state.squares[el[0]] === sign &&\n        this.state.squares[el[1]] === sign &&\n        this.state.squares[el[2]] === sign\n      ) {\n        alert(sign + \" победили\");\n        let currentScore = this.state.score;\n        currentScore[sign]++;\n\n        this.setState({ score: currentScore });\n        setTimeout(this.clear(), 500);\n      }\n    });\n  };\n\n  isDraw = () => {\n    if (this.state.count === 8) {\n      alert(\"Ничья\");\n      setTimeout(this.clear(), 500);\n    }\n  };\n  clickHandler = (event) => {\n    let data = event.target.getAttribute(\"data\");\n    let currentSquares = this.state.squares;\n    if (currentSquares[data] === null) {\n      currentSquares[data] =\n        this.state.count % 2 ? this.state.signs[1] : this.state.signs[0];\n      this.setState({ count: this.state.count + 1 });\n      this.setState({ squares: currentSquares });\n    }\n    console.log(\n      this.state.squares,\n      \"count= \",\n      this.state.count,\n      \"startSign= \",\n      this.state.startSign\n    );\n    this.isWinner(currentSquares[data]);\n    this.isDraw();\n  };\n\n  clear = () => {\n    this.setState({\n      count: 0,\n      squares: Array(9).fill(null),\n    });\n  };\n  changeStartSign = (e) => {\n    let currentSigns = e.target.value === \"x\" ? [\"x\", \"0\"] : [\"0\", \"x\"];\n    this.setState({ signs: currentSigns });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"tic-tac-toe\">\n          <div className=\"ttt-grid\" onClick={this.clickHandler} data=\"0\">\n            {this.state.squares[0]}\n          </div>\n          <div className=\"ttt-grid\" onClick={this.clickHandler} data=\"1\">\n            {this.state.squares[1]}\n          </div>\n          <div className=\"ttt-grid\" onClick={this.clickHandler} data=\"2\">\n            {this.state.squares[2]}\n          </div>\n          <div className=\"ttt-grid\" onClick={this.clickHandler} data=\"3\">\n            {this.state.squares[3]}\n          </div>\n          <div className=\"ttt-grid\" onClick={this.clickHandler} data=\"4\">\n            {this.state.squares[4]}\n          </div>\n          <div className=\"ttt-grid\" onClick={this.clickHandler} data=\"5\">\n            {this.state.squares[5]}\n          </div>\n          <div className=\"ttt-grid\" onClick={this.clickHandler} data=\"6\">\n            {this.state.squares[6]}\n          </div>\n          <div className=\"ttt-grid\" onClick={this.clickHandler} data=\"7\">\n            {this.state.squares[7]}\n          </div>\n          <div className=\"ttt-grid\" onClick={this.clickHandler} data=\"8\">\n            {this.state.squares[8]}\n          </div>\n        </div>\n        <p>Счет:</p>\n        {Object.keys(this.state.score).map((el) => (\n          <p>\n            `{el}`: {this.state.score[el]}{\" \"}\n          </p>\n        ))}\n\n        <p>Выберите кто ходит первым</p>\n        <input\n          type=\"radio\"\n          name=\"sign\"\n          id=\"x\"\n          value=\"x\"\n          onChange={this.changeStartSign}\n        />\n        <label for=\"x\">x</label>\n        <input\n          type=\"radio\"\n          name=\"sign\"\n          id=\"0\"\n          value=\"0\"\n          onChange={this.changeStartSign}\n        />\n        <label for=\"0\">0</label>\n        <br />\n        <br />\n\n        <button className=\"newGame\" onClick={this.clear}>\n          Новая игра\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}